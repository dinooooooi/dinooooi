1.	머신러닝의 개념
애플리케이션을 수정하지 않고도 데이터를 기반으로 패턴을 학습하고 결과를 예측하는 알고리즘 기법
기존의 소프트웨어 코드만으로 해결하기 힘든 문제들 ex) 금융 사기 거래 적발 프로그램 만들기 - 업무적으로 복잡한 조건/규칙의 결합과 변화로 일정한 패턴 찾기 어려움.
‘머신러닝 알고리즘’ : 데이터를 기반으로 통계적인 신뢰도를 강화하고 예측 오류를 최소화하기 위한 다양한 수학적 기법 적용해 데이터 내의 패턴을 스스로 인지하고 신뢰도 있는 예측 결과를 도출해 냄.
데이터 분석 -> 머신러닝 기반의 예측 분석
2.   머신러닝의 분류
1) 지도학습 - 분류, 회귀, 추천시스템, 시각/음성 감지/인지, 텍스트 분석, NLP
2) 비지도학습 - 클러스터링, 차원 축소, 강화학습
3) 강화학습
3. 데이터 전쟁
다양하고 광대한 데이터를 기반으로 만들어진 머신러닝 모델 -> 더 좋은 품질의 머신러닝
4. 파이썬과 R 기반의 머신러닝 비교
개발 생산성 👍 지원 패키지, 생태계 활발
R - 통계 전용 프로그램 언어
파이썬 - 다양한 영역에서 사용되는 개발 전문 프로그램, 높은 생산성, 뛰어난 확장성, 다양한 기업 환경으로의 확산 가능

2.  	파이썬 머신러닝 생태계를 구성하는 주요 패키지
1) 머신러닝 패키지 - 사이킷런
2) 행렬/ 선형대수/통계 패키지 - 넘파이 기반
3) 데이터 핸들링 - 판다스는 파이썬 세계의 대표적인 데이터 처리 패키지, 맷플롯립 호출해 쉽게 시각화 가능
4) 시각화 - 맷플롯립! 단점 보완으로 시본 등 시각화 패키지

3.  	넘파이
: 선형대수 기반의 프로그램을 쉽게 만들 수 있게 하는 패키지
빠른 배열 연산 속도 <- 대량 데이터 배열 연산 가능(루프 X)
다양한 데이터 핸들링 기능 제공
Ndarray 개요
Import numpy as np
array1 = np.array([1,2,3])
print('array1 type:', type(array1))
Print('array1 array 형태:‘, array1.shape)

Array2= np/arrat([[1,2,3],
					  [2,3,4]])
Print('array2 type:', type(array2))
Print('array2 array 형태:’, array2.shape)

Array3 = np.array([[1,2,3]])
Print('array3 type:', type(array3))
Print('array3 array 형태:', array3shpe)

Ndarray.shape는ndarray의 차원과 크기를 튜플 형태를 나타냄
[[1,2,3],[2,3,4]] array의 shape는(2,3) 2개 로우, 3개 칼럼으로 이해해면 됨
Print('arra1: {:0}차원, array2:  {:1}차원, array3: {:2}차원‘, format(array1.ndim, array2.ndim, array3.ndim))
리스트 객채로 차원, 크기 쉽게 표현
